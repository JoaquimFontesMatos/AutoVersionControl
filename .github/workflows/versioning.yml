name: Automated Versioning with Tags Based on Commit Messages

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v3

      # Step 2: Get the latest tag or handle no tags
      - name: Get latest tag
        id: tag
        run: |
          git fetch --tags --depth=1
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          
          # Check if no tag is found and default to v0.0.0
          if [ "$TAG" = "none" ]; then
            echo "No existing tags found. Starting versioning from v0.0.0."
            TAG="v0.0.0"
          else
            echo "Latest tag found: $TAG"
          fi
          echo "latest_tag=$TAG" >> $GITHUB_ENV

      # Step 3: Determine version bump based on commit messages
      - name: Analyze commits for version bump
        id: bump
        run: |
          TAG=${{ env.latest_tag }}

          # Remove 'v' from the tag to get version numbers
          VERSION=${TAG#v}  
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          COMMITS=$(git log --pretty=%B ${TAG}..HEAD)

          # Default version bump type
          BUMP="patch"

          # Check commit messages for version bump type
          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -q "^feat:"; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -q "^fix:"; then
            BUMP="patch"
          fi

          # Calculate the new version
          if [ "$BUMP" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$BUMP" = "patch" ]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "Version bump: $BUMP to $NEW_VERSION"

      # Step 4: Create and push the new tag
      - name: Create and push new tag
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Generate Release Notes
      - name: Generate Release Notes
        run: |
          COMMITS=$(git log --pretty=format:"* %s" ${TAG}..HEAD)
          echo "Release Notes:" > RELEASE_NOTES.md
          echo "$COMMITS" >> RELEASE_NOTES.md
          cat RELEASE_NOTES.md

      # Step 6: Commit and push the generated RELEASE_NOTES.md file
      - name: Commit and push RELEASE_NOTES.md
        run: |
          git add RELEASE_NOTES.md
          git commit -m "chore: update release notes for ${{ env.new_version }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Update the CHANGELOG.md file
      - name: Update CHANGELOG.md
        run: |
          COMMITS=$(git log --pretty=format:"* %s" ${TAG}..HEAD)
          echo "## $NEW_VERSION - $(date +'%Y-%m-%d')" >> CHANGELOG.md
          echo "$COMMITS" >> CHANGELOG.md
          cat CHANGELOG.md

      # Step 8: Commit and push the updated CHANGELOG.md file
      - name: Commit and push CHANGELOG.md
        run: |
          git add CHANGELOG.md
          git commit -m "chore: update changelog for ${{ env.new_version }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
